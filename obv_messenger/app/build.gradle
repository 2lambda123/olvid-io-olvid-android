plugins {
    id 'com.android.application'
    id 'androidx.navigation.safeargs'
    id 'com.google.android.gms.oss-licenses-plugin'
    id 'com.google.protobuf'
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "io.olvid.messenger"
        minSdkVersion 21
        targetSdk 33
        versionCode 184
        versionName "0.13.0"
        vectorDrawables.useSupportLibrary true
        multiDexEnabled true
        resConfigs 'en', 'fr'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation": "$projectDir/schemas".toString(),
                        "room.incremental": "true"
                ]
            }
        }
        manifestPlaceholders.appAuthRedirectScheme = "olvid.openid"
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES']
        }
    }


    buildToolsVersion '33.0.0'

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        dataBinding = true
    }

    flavorDimensions "features"
    productFlavors {
        prod {
            dimension "features"
            buildConfigField "String", "HARDCODED_API_KEY", "\"00000000-0000-0000-0000-000000000000\""
            buildConfigField "String", "CONTENT_PROVIDER_URI_PREFIX", "\"content://io.olvid.messenger.PROVIDER/\""
            buildConfigField "String", "SERVER_NAME", "\"https://server.olvid.io\""
            buildConfigField "String", "KEYCLOAK_REDIRECT_URL", "\"https://openid-redirect.olvid.io/\""
            buildConfigField "int", "LOG_LEVEL", "io.olvid.engine.Logger.INFO"
            manifestPlaceholders = [
                    KEYCLOAK_REDIRECT_HOST : "openid-redirect.olvid.io"
            ]
        }
    }
}


dependencies {
    annotationProcessor 'androidx.room:room-compiler:2.4.3'

    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation project(path: ':libwebrtc')
    implementation project(path: ':sardine-android')
    implementation project(path: ':java-websocket')
    implementation project(':engine')


    // for latest versions see https://github.com/material-components/material-components-android/releases
    implementation 'com.google.android.material:material:1.6.1'
    implementation('com.google.firebase:firebase-messaging:23.1.0') {
        exclude group: 'com.google.firebase', module: 'firebase-core'
        exclude group: 'com.google.firebase', module: 'firebase-analytics'
        exclude group: 'com.google.firebase', module: 'firebase-measurement-connector'
    }
    // starting with zxing 3.4.0, API level 24 is required...
    implementation 'com.google.zxing:core:3.3.3'
    implementation 'com.android.billingclient:billing:4.1.0'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4'

    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'androidx.emoji2:emoji2:1.2.0'
    implementation 'androidx.emoji2:emoji2-bundled:1.2.0'
    implementation 'androidx.activity:activity:1.6.0'
    implementation 'androidx.biometric:biometric:1.1.0'
    implementation 'androidx.camera:camera-camera2:1.1.0'
    implementation 'androidx.camera:camera-lifecycle:1.1.0'
    implementation 'androidx.camera:camera-view:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.core:core-splashscreen:1.0.0'
    implementation 'androidx.core:core:1.9.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.4'
    implementation 'androidx.fragment:fragment:1.5.3'
    implementation 'androidx.lifecycle:lifecycle-process:2.5.1'
    implementation 'androidx.media2:media2-player:1.2.1'
    implementation 'androidx.media2:media2-session:1.2.1'
    implementation 'androidx.media2:media2-widget:1.2.1'
    implementation 'androidx.media:media:1.6.0'
    implementation 'androidx.navigation:navigation-fragment:2.5.2'
    implementation 'androidx.navigation:navigation-ui:2.5.2'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.room:room-runtime:2.4.3'
    implementation 'androidx.sharetarget:sharetarget:1.2.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.work:work-runtime:2.7.1'

    // generation of the opensource license page
    implementation 'com.google.android.gms:play-services-oss-licenses:17.0.0'

    // connection to google drive
    implementation 'com.google.android.gms:play-services-auth:20.3.0'
    implementation('com.google.http-client:google-http-client-gson:1.42.2') {
        exclude group: 'org.apache.httpcomponents'
    }
    implementation('com.google.api-client:google-api-client-android:2.0.0') {
        exclude group: 'org.apache.httpcomponents'
    }
    implementation('com.google.apis:google-api-services-drive:v3-rev20220815-2.0.0') {
        exclude group: 'org.apache.httpcomponents'
    }

    // webclient
    testImplementation 'org.java-websocket:Java-WebSocket:1.5.3'
    implementation 'com.google.protobuf:protobuf-lite:3.0.1'

    // openID
    implementation 'net.openid:appauth:0.11.1'
    implementation 'org.bitbucket.b_c:jose4j:0.9.0'
}

apply plugin: 'com.google.gms.google-services'

import org.gradle.internal.os.OperatingSystem
OperatingSystem os = OperatingSystem.current()

protobuf {
    protoc {
        if (os.isMacOsX()) {
            artifact = 'com.google.protobuf:protoc:3.18.0:osx-x86_64'
        } else {
            artifact = 'com.google.protobuf:protoc:3.18.0'
        }
    }
    plugins {
        javalite {
            if (os.isMacOsX()) {
                artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0:osx-x86_64'
            } else {
                artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
            }
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    remove java
                }
                task.plugins {
                    javalite { }
                }
            }
        }
    }
}